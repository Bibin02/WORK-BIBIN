# -*- coding: utf-8 -*-
"""fishing hotspots.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eJLBslmr1-EpsRNuDUqWXpVDrJ0-E6AB
"""

from netCDF4 import Dataset
import numpy as np

my_example_nc_file1 = '/content/sample_data/sea_surface_temp.nc'
fr = Dataset(my_example_nc_file1, mode='r')

my_example_nc_file2 = '/content/sample_data/contamination.nc'
fs = Dataset(my_example_nc_file2, mode='r')

my_example_nc_file3 = '/content/sample_data/chlorophyll.nc'
ft = Dataset(my_example_nc_file3, mode='r')

lons = fr.variables['lon'][:]
lats = fr.variables['lat'][:]

sst = fr.variables['sst'][:]
contamin = fs.variables['contamination'][:]
chloro = ft.variables['chloro_a'][:]


#Finally, it is good form to close the file when you are finished.
fs.close()
ft.close()
fr.close()

'''
FROM THE ABOVE SST AND CHLOROPHYLL LEVELS OF THE PARTICULAR LOCATION WE CAN PROVIDE THE PROPER  
 FISHING HOTSPOTS NEAR THE CURRENT LOCATION USING THE STATISTICS GIVEN BY THE MACHINE LEARNING ALGORITHM
'''

# importing geopy library
from geopy.geocoders import Nominatim
 
# calling the Nominatim tool
loc = Nominatim(user_agent="GetLoc")
 
# entering the location name
getLoc = loc.geocode("Your location")

 
# printing latitude and longitude
current_latitude =getLoc.latitude
current_longitude =getLoc.longitude

#current_latitude ie, ur latitude
#current_longitude ie, ur longitude
def binarySearch(arr, l, r, x):
 
    # Check base case
    if r >= l:
 
        mid = l + (r - l) // 2
 
        # If element is present at the middle itself
        if arr[mid] == x:
            return mid
 
        # If element is smaller than mid, then it
        # can only be present in left subarray
        elif arr[mid] > x:
            return binarySearch(arr, l, mid-1, x)
 
        # Else the element can only be present
        # in right subarray
        else:
            return binarySearch(arr, mid + 1, r, x)
 
    else:
        # Element is not present in the array
        return -1


latitude_index=binarySearch(lats,0,len(lats)-1,current_latitude)
longitude_index=binarySearch(lats,0,len(lons)-1,current_longitude)

htspt_lat=[]
htspt_lng=[]
for i in range(lats[latitude_index]-0.5,lats[latitude_index]+0.5,0.005):
  for j in range(lons[longitude_index]-0.5,lons[longitude_index]+0.5,0.005):
    # if (sst[i]>threshold and sst[i]<=upperlimit and chloro[i]>chlorolimit and contamin[i]<cont_limit):
        htspt_lat.append(lats[i])
        htspt_lng.append(lons[i])


#THE RETURNED LIST OF LATITUDES( htspt_lat) AND LONGITUDES(htspt_lng) ARE USED FOR MAP MARKER